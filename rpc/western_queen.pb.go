// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/western_queen.proto

package western_queen

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// slave to master write wrong trace data
type WrongTraceDataRequest struct {
	TraceId              string   `protobuf:"bytes,1,opt,name=traceId,proto3" json:"traceId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WrongTraceDataRequest) Reset()         { *m = WrongTraceDataRequest{} }
func (m *WrongTraceDataRequest) String() string { return proto.CompactTextString(m) }
func (*WrongTraceDataRequest) ProtoMessage()    {}
func (*WrongTraceDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_567c35356db43e2a, []int{0}
}

func (m *WrongTraceDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WrongTraceDataRequest.Unmarshal(m, b)
}
func (m *WrongTraceDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WrongTraceDataRequest.Marshal(b, m, deterministic)
}
func (m *WrongTraceDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrongTraceDataRequest.Merge(m, src)
}
func (m *WrongTraceDataRequest) XXX_Size() int {
	return xxx_messageInfo_WrongTraceDataRequest.Size(m)
}
func (m *WrongTraceDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WrongTraceDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WrongTraceDataRequest proto.InternalMessageInfo

func (m *WrongTraceDataRequest) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

// master to slave share wrong trace data
type ShareWrongTraceDataReturn struct {
	WrongTraceDataRequests []string `protobuf:"bytes,1,rep,name=wrongTraceDataRequests,proto3" json:"wrongTraceDataRequests,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ShareWrongTraceDataReturn) Reset()         { *m = ShareWrongTraceDataReturn{} }
func (m *ShareWrongTraceDataReturn) String() string { return proto.CompactTextString(m) }
func (*ShareWrongTraceDataReturn) ProtoMessage()    {}
func (*ShareWrongTraceDataReturn) Descriptor() ([]byte, []int) {
	return fileDescriptor_567c35356db43e2a, []int{1}
}

func (m *ShareWrongTraceDataReturn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShareWrongTraceDataReturn.Unmarshal(m, b)
}
func (m *ShareWrongTraceDataReturn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShareWrongTraceDataReturn.Marshal(b, m, deterministic)
}
func (m *ShareWrongTraceDataReturn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareWrongTraceDataReturn.Merge(m, src)
}
func (m *ShareWrongTraceDataReturn) XXX_Size() int {
	return xxx_messageInfo_ShareWrongTraceDataReturn.Size(m)
}
func (m *ShareWrongTraceDataReturn) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareWrongTraceDataReturn.DiscardUnknown(m)
}

var xxx_messageInfo_ShareWrongTraceDataReturn proto.InternalMessageInfo

func (m *ShareWrongTraceDataReturn) GetWrongTraceDataRequests() []string {
	if m != nil {
		return m.WrongTraceDataRequests
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_567c35356db43e2a, []int{2}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*WrongTraceDataRequest)(nil), "WrongTraceDataRequest")
	proto.RegisterType((*ShareWrongTraceDataReturn)(nil), "ShareWrongTraceDataReturn")
	proto.RegisterType((*Empty)(nil), "Empty")
}

func init() {
	proto.RegisterFile("rpc/western_queen.proto", fileDescriptor_567c35356db43e2a)
}

var fileDescriptor_567c35356db43e2a = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x2a, 0x48, 0xd6,
	0x2f, 0x4f, 0x2d, 0x2e, 0x49, 0x2d, 0xca, 0x8b, 0x2f, 0x2c, 0x4d, 0x4d, 0xcd, 0xd3, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x57, 0x32, 0xe4, 0x12, 0x0d, 0x2f, 0xca, 0xcf, 0x4b, 0x0f, 0x29, 0x4a, 0x4c,
	0x4e, 0x75, 0x49, 0x2c, 0x49, 0x0c, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe0, 0x62,
	0x2f, 0x01, 0x89, 0x79, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x4a, 0xc1,
	0x5c, 0x92, 0xc1, 0x19, 0x89, 0x45, 0xa9, 0xe8, 0xfa, 0x4a, 0x4a, 0x8b, 0xf2, 0x84, 0xcc, 0xb8,
	0xc4, 0xca, 0xb1, 0x99, 0x57, 0x2c, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x19, 0x84, 0x43, 0x56, 0x89,
	0x9d, 0x8b, 0xd5, 0x35, 0xb7, 0xa0, 0xa4, 0xd2, 0xa8, 0x93, 0x91, 0x8b, 0x27, 0x1c, 0xe2, 0xd0,
	0x40, 0x90, 0x3b, 0x85, 0xcc, 0xb8, 0x84, 0x82, 0x53, 0xf3, 0x52, 0x50, 0x6d, 0x13, 0x12, 0xd3,
	0xc3, 0xea, 0x6c, 0x29, 0x36, 0x3d, 0xb0, 0x31, 0x4a, 0x0c, 0x42, 0x8e, 0x5c, 0xe2, 0x41, 0xa9,
	0x89, 0x29, 0x58, 0x9c, 0x2a, 0x04, 0x55, 0x24, 0x25, 0xa5, 0x87, 0xd3, 0x23, 0x4a, 0x0c, 0x06,
	0x8c, 0x49, 0x6c, 0xe0, 0x30, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x00, 0xf4, 0x64, 0xab,
	0x3e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WesternQueenClient is the client API for WesternQueen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WesternQueenClient interface {
	SendWrongTraceData(ctx context.Context, in *WrongTraceDataRequest, opts ...grpc.CallOption) (*Empty, error)
	ReadShareWrongTraceData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (WesternQueen_ReadShareWrongTraceDataClient, error)
}

type westernQueenClient struct {
	cc grpc.ClientConnInterface
}

func NewWesternQueenClient(cc grpc.ClientConnInterface) WesternQueenClient {
	return &westernQueenClient{cc}
}

func (c *westernQueenClient) SendWrongTraceData(ctx context.Context, in *WrongTraceDataRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/WesternQueen/SendWrongTraceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *westernQueenClient) ReadShareWrongTraceData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (WesternQueen_ReadShareWrongTraceDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WesternQueen_serviceDesc.Streams[0], "/WesternQueen/ReadShareWrongTraceData", opts...)
	if err != nil {
		return nil, err
	}
	x := &westernQueenReadShareWrongTraceDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WesternQueen_ReadShareWrongTraceDataClient interface {
	Recv() (*ShareWrongTraceDataReturn, error)
	grpc.ClientStream
}

type westernQueenReadShareWrongTraceDataClient struct {
	grpc.ClientStream
}

func (x *westernQueenReadShareWrongTraceDataClient) Recv() (*ShareWrongTraceDataReturn, error) {
	m := new(ShareWrongTraceDataReturn)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WesternQueenServer is the server API for WesternQueen service.
type WesternQueenServer interface {
	SendWrongTraceData(context.Context, *WrongTraceDataRequest) (*Empty, error)
	ReadShareWrongTraceData(*Empty, WesternQueen_ReadShareWrongTraceDataServer) error
}

// UnimplementedWesternQueenServer can be embedded to have forward compatible implementations.
type UnimplementedWesternQueenServer struct {
}

func (*UnimplementedWesternQueenServer) SendWrongTraceData(ctx context.Context, req *WrongTraceDataRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWrongTraceData not implemented")
}
func (*UnimplementedWesternQueenServer) ReadShareWrongTraceData(req *Empty, srv WesternQueen_ReadShareWrongTraceDataServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadShareWrongTraceData not implemented")
}

func RegisterWesternQueenServer(s *grpc.Server, srv WesternQueenServer) {
	s.RegisterService(&_WesternQueen_serviceDesc, srv)
}

func _WesternQueen_SendWrongTraceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WrongTraceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WesternQueenServer).SendWrongTraceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WesternQueen/SendWrongTraceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WesternQueenServer).SendWrongTraceData(ctx, req.(*WrongTraceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WesternQueen_ReadShareWrongTraceData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WesternQueenServer).ReadShareWrongTraceData(m, &westernQueenReadShareWrongTraceDataServer{stream})
}

type WesternQueen_ReadShareWrongTraceDataServer interface {
	Send(*ShareWrongTraceDataReturn) error
	grpc.ServerStream
}

type westernQueenReadShareWrongTraceDataServer struct {
	grpc.ServerStream
}

func (x *westernQueenReadShareWrongTraceDataServer) Send(m *ShareWrongTraceDataReturn) error {
	return x.ServerStream.SendMsg(m)
}

var _WesternQueen_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WesternQueen",
	HandlerType: (*WesternQueenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendWrongTraceData",
			Handler:    _WesternQueen_SendWrongTraceData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadShareWrongTraceData",
			Handler:       _WesternQueen_ReadShareWrongTraceData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/western_queen.proto",
}
